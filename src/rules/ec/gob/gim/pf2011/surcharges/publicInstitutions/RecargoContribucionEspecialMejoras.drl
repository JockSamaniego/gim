#created on: Julio 2016-21
package ec.gob.gim.rules.pf2011
import ec.gob.gim.revenue.model.MunicipalBond;
import ec.gob.gim.common.model.FiscalPeriod;
import ec.gob.gim.revenue.model.Item;
import java.math.BigDecimal;
import org.gob.gim.common.DateUtils;
import java.util.Calendar;
import java.util.Date;
import org.gob.gim.common.InterestPublicInstitutionUtils;

function BigDecimal findSurchargeFactor(Date expiration, Long residentId){

	Calendar paymentDate = DateUtils.getTruncatedInstance(new Date());
	Calendar expirationDate = DateUtils.getTruncatedInstance(expiration);

	#macartuche
	Calendar transitionDate = InterestPublicInstitutionUtils.transitionDate;
	
	System.out.println("Fecha de transitoria: "+transitionDate.getTime());        
	System.out.println("Fecha de pago: "+paymentDate.getTime());   
	System.out.println("Fecha de expiracion: "+expirationDate.getTime());        
		    
	System.out.println("Public? "+InterestPublicInstitutionUtils.isPublicInstitution(residentId));    
	if(InterestPublicInstitutionUtils.isPublicInstitution(residentId)){
		#compara fechas
	    boolean paymentDateMajorTransitionDate 		= paymentDate.after(transitionDate);
	    boolean transitionDateMajorExpirationDate 	= transitionDate.after(expirationDate);
	    boolean paymentDateMajorExpirationDate 		= paymentDate.after(expirationDate);
	    
		System.out.println("paymentDateMajorTransitionDate: "+paymentDateMajorTransitionDate);        
		System.out.println("transitionDateMajorExpirationDaten: "+transitionDateMajorExpirationDate);        
		System.out.println("paymentDateMajorExpirationDate: "+paymentDateMajorExpirationDate);        
	
	    
	    if (paymentDateMajorTransitionDate && paymentDateMajorExpirationDate ){
			return calcSurcharge(transitionDate, expirationDate);    	
	    } 	
	}
		
	if(paymentDate.after(expirationDate)){
		return calcSurcharge(paymentDate, expirationDate);
	}
	return new BigDecimal(0);
}

function BigDecimal calcSurcharge(Calendar date1, Calendar expirationDate){
	Integer months = (date1.get(Calendar.YEAR) - expirationDate.get(Calendar.YEAR)) * 12 +
					(date1.get(Calendar.MONTH)- expirationDate.get(Calendar.MONTH));
	System.out.println("MONTHS DIFF -----> " + months);
	
	if( months <= 12){
		if(months <0){
			months = 0;
		}
		BigDecimal q= new java.math.BigDecimal(0.001).multiply(new BigDecimal(months));
		System.out.println("menor a 12 "+q);
		return new java.math.BigDecimal(0.001).multiply(new BigDecimal(months));
	} else {
		BigDecimal q= new java.math.BigDecimal(0.015).multiply(new BigDecimal(months));
		System.out.println("mayor a 12 "+q);
		return new java.math.BigDecimal(0.015).multiply(new BigDecimal(months));
	}
}


rule "Recargo de contribucion especial de mejoras"
	no-loop true
	salience 0
	when		
		$itemPredio : Item(entry.name == "RECARGO CONTRIBUCION ESPECIAL MEJORAS");
		$mb : MunicipalBond();
	then		
		$itemPredio.setTotal($mb.getItems().get(0).getTotal().multiply(findSurchargeFactor($mb.getExpirationDate(),  $mb.getResident().getId() )));		
		System.out.println("=========>"+$mb.getNumber());
end
