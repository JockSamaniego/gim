#created on: 2015-jul-20
package ec.gob.gim.rules.pf2011
import ec.gob.gim.revenue.model.MunicipalBond;
import ec.gob.gim.common.model.FiscalPeriod;
import ec.gob.gim.revenue.model.Item;
import java.math.BigDecimal;
import org.gob.gim.common.DateUtils;
import java.util.Calendar;
import java.util.Date;
import org.gob.gim.common.InterestPublicInstitutionUtils;

function BigDecimal findSurchargeFactor(Date expiration, Long residentId){

        Calendar paymentDate = DateUtils.getTruncatedInstance(new Date());
        Calendar expirationDate = DateUtils.getTruncatedInstance(expiration);
        
        Calendar transitionDate = Calendar.getInstance();
		transitionDate.set(Calendar.DAY_OF_MONTH, 21);
		transitionDate.set(Calendar.MONTH, 4);		
		transitionDate.set(Calendar.YEAR, 2016);
		transitionDate.set(Calendar.HOUR_OF_DAY, 0);
		transitionDate.set(Calendar.MINUTE, 0);
		transitionDate.set(Calendar.MILLISECOND, 0);
		
		System.out.println("Fecha de transitoria: "+transitionDate.getTime());        
	    
	    System.out.println("Public? "+InterestPublicInstitutionUtils.isPublicInstitution(residentId));    
	    if(InterestPublicInstitutionUtils.isPublicInstitution(residentId)){
	     	#compara fechas
	     	boolean paymentDateMajorTransitionDate 		= paymentDate.after(transitionDate);
	     	boolean transitionDateMajorExpirationDate 	= transitionDate.after(expirationDate);
	     	boolean paymentDateMajorExpirationDate 		= paymentDate.after(expirationDate);
	     	
	     	if (paymentDateMajorTransitionDate && paymentDateMajorExpirationDate ){
	     		System.out.println("fecha pago mayor a transitoria "+paymentDateMajorTransitionDate);
	     		System.out.println("fecha transition mayor a expiracion "+transitionDateMajorExpirationDate);
	    		System.out.println("fecha pago mayor a expiracion "+paymentDateMajorExpirationDate);
	    		
	    		#se congela el recargo hasta el 21 de Mayo 2016
	     		#if( transitionDateMajorExpirationDate ) {
	     			System.out.println("Ingresa a calcular");
	     			return calcSurcharge(transitionDate, expirationDate);
	     		#}
	     	}
	     }   
        
        return calcSurcharge(paymentDate, expirationDate);
}


function BigDecimal calcSurcharge(Calendar date1, Calendar expirationDate){

	System.out.println("Llega a metodo");
	if(date1.after(expirationDate)){
		
		System.out.println("Fecha date1 "+date1.getTime());
		System.out.println("Fecha expirationDate "+expirationDate.getTime());
    	if (date1.get(Calendar.YEAR) == expirationDate.get(Calendar.YEAR)){
        
        	System.out.println("Anios iguales ");
    	
        	Integer days = date1.get(Calendar.DAY_OF_YEAR) - expirationDate.get(Calendar.DAY_OF_YEAR);
            System.out.println("DAYS DIFFERENCE -----> " + days);
                
            if( days >= 10){
            	return new java.math.BigDecimal(1);
            } else {
            	return new java.math.BigDecimal(0.1).multiply(new BigDecimal(days));
            }
        } else
        	return new java.math.BigDecimal(1);
    }
    
    return new BigDecimal(0);
}

rule "Recargo multas SIMERT"
        no-loop true
        salience 0
        when            
                $itemPredio : Item(entry.id == 586);
                $mb : MunicipalBond();
        then            
                $itemPredio.setTotal($mb.getItems().get(0).getTotal().multiply(findSurchargeFactor($mb.getExpirationDate(), $mb.getResident().getId())));          
end
