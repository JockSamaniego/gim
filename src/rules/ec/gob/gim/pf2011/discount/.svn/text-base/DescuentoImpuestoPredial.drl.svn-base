#created on: Oct 31, 2011
package ec.gob.gim.rules.pf2011
import ec.gob.gim.revenue.model.MunicipalBond;
import ec.gob.gim.common.model.FiscalPeriod;
import ec.gob.gim.revenue.model.Item;
import java.math.BigDecimal;
import java.util.Calendar;


function BigDecimal calculateDiscount(java.util.Date serviceDate){
	Calendar ca = java.util.Calendar.getInstance();
	ca.set(Calendar.HOUR_OF_DAY, 0);
	ca.set(Calendar.MINUTE, 0);     
	ca.set(Calendar.SECOND, 0);     
	ca.set(Calendar.MILLISECOND, 0);
	java.util.Date actual = ca.getTime();
			
	if(serviceDate.getYear() != actual.getYear() ){
		return new java.math.BigDecimal(0);
	}
	
	#Del 01 al 15 de Enero
	java.util.Date firstRange = new java.util.Date(actual.getYear(),0,1);
	java.util.Date lastRange = new java.util.Date(actual.getYear(),0,15);	
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){		
		return new java.math.BigDecimal(0.1);
	}
	
	#Del 16 al 31 de Enero
	firstRange = new java.util.Date(actual.getYear(),0,16);
	lastRange = new java.util.Date(actual.getYear(),0,31);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.09);
	}
	
	#Del 01 al 15 de Febrero
	firstRange = new java.util.Date(actual.getYear(),1,1);
	lastRange = new java.util.Date(actual.getYear(),1,15);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.08);
	}
	
	int year = actual.getYear();
  	int month = Calendar.FEBRUARY;
  	int date = 1;

  	ca.set(year, month, date);

  	int maxDay = ca.getActualMaximum(Calendar.DAY_OF_MONTH);
	
	#Del 16 al 28 de Febrero
	firstRange = new java.util.Date(actual.getYear(),1,16);
	lastRange = new java.util.Date(actual.getYear(),1,maxDay);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.07);
	}
	
	#Del 01 al 15 de Marzo
	firstRange = new java.util.Date(actual.getYear(),2,1);
	lastRange = new java.util.Date(actual.getYear(),2,15);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.06);
	}
	
	#Del 16 al 31 de Marzo	
	firstRange = new java.util.Date(actual.getYear(),2,16);
	lastRange = new java.util.Date(actual.getYear(),2,31);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.05);
	}
	
	#Del 01 al 15 de Abril
	firstRange = new java.util.Date(actual.getYear(),3,1);
	lastRange = new java.util.Date(actual.getYear(),3,15);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.04);
	}
	
	#Del 16 al 30 de Abril
	firstRange = new java.util.Date(actual.getYear(),3,16);
	lastRange = new java.util.Date(actual.getYear(),3,30);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.03);
	}
	
	#Del 01 al 15 de Mayo
	firstRange = new java.util.Date(actual.getYear(),4,1);
	lastRange = new java.util.Date(actual.getYear(),4,15);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.03);
	}
	
	#Del 16 al 31 de Mayo
	firstRange = new java.util.Date(actual.getYear(),4,16);
	lastRange = new java.util.Date(actual.getYear(),4,31);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.02);
	}	
	
	#Del 01 al 15 de Junio
	firstRange = new java.util.Date(actual.getYear(),5,1);
	lastRange = new java.util.Date(actual.getYear(),5,15);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.02);
	}
	
	#Del 16 al 30 de Junio
	firstRange = new java.util.Date(actual.getYear(),5,16);
	lastRange = new java.util.Date(actual.getYear(),5,30);
	if((actual.after(firstRange) && actual.before(lastRange)) || actual.equals(firstRange) || actual.equals(lastRange)){
		return new java.math.BigDecimal(0.01);
	}
	
	return new BigDecimal(0);
		
}


#list any import classes here.

rule "Descuento Impuesto predial"
	no-loop true
	salience 0
	when		
		$itemPredio : Item(entry.name == "DESCUENTO IMPUESTO PREDIAL");
		$mb : MunicipalBond();		
	then		
		$itemPredio.setTotal($mb.getItems().get(0).getTotal().multiply(calculateDiscount($mb.getServiceDate())));			
end
