package ec.gob.gim.revenue.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.TableGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import ec.gob.gim.coercive.model.Notification;
import ec.gob.gim.common.model.FinancialStatus;
import ec.gob.gim.common.model.FiscalPeriod;
import ec.gob.gim.common.model.Person;
import ec.gob.gim.common.model.Resident;
import ec.gob.gim.income.model.CreditNote;
import ec.gob.gim.income.model.Deposit;
import ec.gob.gim.income.model.LegalStatus;
import ec.gob.gim.income.model.PaymentAgreement;
import ec.gob.gim.income.model.Receipt;
import ec.gob.gim.income.model.TaxItem;

/**
 * @author gerson
 * @version 1.0
 * @created 04-Ago-2011 16:30:30
 */
@Audited
@Entity
@TableGenerator(name = "MunicipalBondGenerator", table = "IdentityGenerator", pkColumnName = "name", valueColumnName = "value", pkColumnValue = "MunicipalBond", initialValue = 1, allocationSize = 1)

@NamedQueries(value = {
		@NamedQuery(name = "MunicipalBond.findByResidentIdAndTypeAndStatus", 
				query =   "SELECT DISTINCT mb FROM MunicipalBond mb " 
						+ "LEFT JOIN FETCH mb.entry " 
						+ "LEFT JOIN FETCH mb.resident " 
						+ "WHERE mb.resident.id=:residentId AND "
						+ "mb.municipalBondType=:municipalBondType AND "
						+ "mb.municipalBondStatus.id IN (:municipalBondStatusIds) "
						+ "ORDER BY mb.entry.id, mb.groupingCode, mb.serviceDate, mb.id"),
		
				
						
		@NamedQuery(name = "MunicipalBond.findById", 
				query =   "SELECT DISTINCT mb FROM MunicipalBond mb " 
						+ "LEFT JOIN FETCH mb.entry " 
						+ "LEFT JOIN FETCH mb.resident " 
						+ "LEFT JOIN FETCH mb.deposits " 
						+ "LEFT JOIN FETCH mb.receipt " 
						+ "LEFT JOIN FETCH mb.items it "
						+ "LEFT JOIN FETCH mb.discountItems di " 
						+ "LEFT JOIN FETCH mb.surchargeItems si "
						+ "LEFT JOIN FETCH mb.surchargeItems si "
						+ "LEFT JOIN FETCH mb.taxItems ti "
						+ "LEFT JOIN FETCH ti.tax ti "
						+ "WHERE mb.id = :municipalBondId"),						
						
		@NamedQuery(name="MunicipalBond.SumTotalValuesByEntryPreviousYears", 
			    query="select e.id,SUM(m.value) from MunicipalBond m " +
			    	"join m.entry e where m.emisionPeriod < :startDate AND m.municipalBondStatus.id = :municipalBondStatusId" +
					" GROUP BY e.id"),
					
		@NamedQuery(name="MunicipalBond.SumTotalValuesByEntryNextYears", 
			    query="select e.id,SUM(m.value) from MunicipalBond m " +
			    	"join m.entry e where m.emisionPeriod > :endDate AND m.municipalBondStatus.id = :municipalBondStatusId" +
					" GROUP BY e.id"),
		
		@NamedQuery(name="MunicipalBond.SumTotalValuesByEntryPreviousYearsInPaymentAgreement", 
			    query="select e.id,SUM(d.value) from MunicipalBond m join m.deposits d " +
			    	"join m.entry e where m.emisionPeriod < :startDate AND m.municipalBondStatus.id = :municipalBondStatusId" +
					" GROUP BY e.id"),
					
		@NamedQuery(name="MunicipalBond.SumTotalValuesByEntryNextYearsInPaymentAgreement", 
			    query="select e.id,SUM(d.value) from MunicipalBond m join m.deposits d " +
			    	"join m.entry e where m.emisionPeriod > :endDate AND m.municipalBondStatus.id = :municipalBondStatusId" +
					" GROUP BY e.id"),
		
		@NamedQuery(name = "MunicipalBond.findByNumberAndStatusAndResidentId", 
				query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry LEFT JOIN FETCH mb.creditNote "
						+ "WHERE "
						+ "mb.resident.id = :residentId AND "
						+ "mb.number = :municipalBondNumber AND "
						+ "mb.municipalBondStatus.id IN (:municipalBondStatusIds) "),
				
		@NamedQuery(name = "MunicipalBond.findOverdueByResidentIdAndTypeAndStatus", 
				query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry "
				+ "WHERE mb.resident.id=:residentId AND "
				+ "mb.municipalBondType=:municipalBondType AND "
				+ "mb.municipalBondStatus.id = :municipalBondStatusId "
				+ "ORDER BY mb.entry.id, mb.groupingCode, mb.serviceDate"),
		@NamedQuery(name = "MunicipalBond.findByResidentIdAndTypeAndStatusAndDaysOutOfDateAndAmount", query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry "
				+ "WHERE mb.resident.id=:residentId AND "
				+ "mb.municipalBondType=:municipalBondType AND "
				+ "mb.municipalBondStatus.id=:municipalBondStatusId AND "
				+ "(lower(mb.entry.name) like lower(concat(:municipalEntryName,'%'))) AND "
				+ "mb.paidTotal>=:municipalBondPaymentTotal AND "
				+ "mb.fiscalPeriod=:municipalBondFiscalPeriod AND "
				+ "mb.expirationDate<=:municipalBondExpirationDate "
				+ "ORDER BY mb.entry.id, mb.groupingCode, mb.serviceDate"),
		@NamedQuery(name = "MunicipalBond.findByResidentIdAndEntryIdAndServiceDateAndGroupingCode", query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry "
				+ "WHERE mb.resident.id=:residentId AND "
				+ "mb.serviceDate=:serviceDate AND "
				+ "mb.entry.id=:entryId AND "
				+ "mb.groupingCode=:groupingCode " + "ORDER BY mb.entry.id"),
				
		@NamedQuery(name = "MunicipalBond.findExpiratedByResidentIdAndAmount", query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry "
				+ "WHERE "
				+ "(lower(mb.entry.name) like lower(concat(:criteria,'%')) or " 
				+ "lower(mb.entry.code) like lower(concat(:criteria,'%')) )and "	
				+ "mb.resident.id=:residentId AND "
				+ "mb.municipalBondType=:municipalBondType AND "
				+ "mb.municipalBondStatus.id=:municipalBondStatusId AND "				
				+ "mb.expirationDate <= :expirationDate AND mb.notification IS NULL AND mb.value >= :value "			
				+ "ORDER BY mb.entry.id"),
		@NamedQuery(name = "MunicipalBond.findByResidentIdAndEntryId", query = "SELECT mb FROM MunicipalBond mb LEFT JOIN FETCH mb.entry "
				+ "WHERE mb.resident.id=:residentId AND "
				+ "mb.municipalBondType=:municipalBondType AND "
				+ "mb.municipalBondStatus.id=:municipalBondStatusId AND "
				+ "mb.entry.id=:entryId "
				+ "ORDER BY mb.entry.id, mb.groupingCode, mb.serviceDate"),

		@NamedQuery(name = "MunicipalBond.findByPaymentAgreementIdAndStatusId", query = "SELECT mb FROM MunicipalBond mb "
				+ "WHERE mb.paymentAgreement.id=:paymentAgreementId AND "
				+ "mb.municipalBondStatus.id=:municipalBondStatusId "
				+ "ORDER BY expirationDate"),
				
		@NamedQuery(name = "MunicipalBond.findByStatusAndCashierAndDate", query = "SELECT mb FROM MunicipalBond mb "
				+ "WHERE mb.municipalBondStatus.id=:municipalBondStatusId AND "
				+ "mb.municipalBondStatus.id=:municipalBondStatusId ORDER BY expirationDate"),
				
		@NamedQuery(name="MunicipalBond.SumTotalsEmmitedByEntry", 
			    query="select SUM(m.value) from MunicipalBond m join m.entry e left join e.account ac where m.emisionDate Between :startDate and :endDate " +
			    	  "and e.id =:entryId GROUP BY e.code, ac.budgetCertificateCode ORDER BY ac.budgetCertificateCode"),
			    	  
		@NamedQuery(name="MunicipalBond.SumTotalEmittedBetweenDates", 
			    query="select e.id, e.name, e.code, ac.accountCode, ac.budgetCertificateCode, SUM(m.value) from MunicipalBond m join m.entry e left join e.account ac where m.emisionDate Between :startDate and :endDate" +
				" GROUP BY e.id, e.name, e.code, ac.accountCode, ac.budgetCertificateCode ORDER BY ac.budgetCertificateCode"),			
				
		@NamedQuery(name="MunicipalBond.findByStatusAndDate", 
				query="select m from MunicipalBond m where m.emisionDate Between :startDate and :endDate and m.municipalBondStatus.id=:municipalBondStatusId ORDER BY m.id"),
				
		@NamedQuery(name="MunicipalBond.findBetweenEmissionDates", 
			    query="select distinct(mb) from MunicipalBond mb "		
				+ "LEFT JOIN FETCH mb.receipt r "
				+ "LEFT JOIN FETCH mb.items i " 
			    + "where mb.emisionDate Between :startDate and :endDate"),	
			    
		@NamedQuery(name="MunicipalBond.findTotalBetweenEmissionDates", 
					    query="select sum(m.value) from MunicipalBond m where m.emisionDate Between :startDate and :endDate"),
					    
		@NamedQuery(name="MunicipalBond.findTotalByEntriesBetweenEmissionDates", 
					    query="select e.id,sum(m.value) from MunicipalBond m left join m.entry e where m.emisionDate Between :startDate and :endDate GROUP BY e.id"),
		@NamedQuery(name="MunicipalBond.findEntrieBetweenEmissionDates", 
			    query="select distinct (e) from MunicipalBond m left join m.entry e where m.emisionDate Between :startDate and :endDate ORDER BY e.code"),

	    @NamedQuery(name="MunicipalBond.findMunicipalBonds", 
			    query="select m from MunicipalBond m where m.emisionDate Between :startDate and :endDate ORDER BY m.id"),

		@NamedQuery(name = "MunicipalBond.setPaidStatus", query = "UPDATE MunicipalBond mb "
				+ "SET mb.balance = :balance, "
				+ "    mb.paidTotal = :paidTotal, "
				+ "    mb.interest = :interest, "
				+ "    mb.surcharge = :surcharge, "
				+ "    mb.discount = :discount, "
				+ "    mb.taxesTotal = :taxesTotal, "
				+ "    mb.printingsNumber = :printingsNumber, "
				+ "    mb.municipalBondStatus.id = :municipalBondStatusId "
				+ "WHERE mb.id IN (:municipalBondId)"),
				
		@NamedQuery(name = "MunicipalBond.changeStatus", 
				query = "UPDATE MunicipalBond mb "
						+ " SET " 
						+ "    mb.municipalBondStatus.id = :municipalBondStatusId "
						+ " WHERE mb.id IN (:municipalBondIds)"),

		@NamedQuery(name = "MunicipalBond.updateReprintings", 
				query = "UPDATE MunicipalBond mb "
						+ " SET " 
						+ "    mb.printingsNumber = (mb.printingsNumber + 1) "
						+ " WHERE mb.id = :municipalBondId"),

		@NamedQuery(name = "MunicipalBond.updateLegalStatus", 
				query = "UPDATE MunicipalBond mb "
						+ " SET " 
						+ "    mb.legalStatus = :legalStatus, "
						+ "    mb.creditNote.id = :creditNoteId "
						+ " WHERE mb.id IN (:municipalBondIds)"),
		@NamedQuery(name = "MunicipalBond.updatePaymentAgreement", 
				query = "UPDATE MunicipalBond mb "
					+ " SET " 
					+ "    mb.municipalBondStatus.id = :municipalBondStatusId, " 
					+ "    mb.paymentAgreement.id = :paymentAgreementId "
					+ " WHERE mb.id IN (:municipalBondIds)")						
})

				
public class MunicipalBond implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 18386387333339876L;

	@Id
	@GeneratedValue(generator = "MunicipalBondGenerator", strategy = GenerationType.TABLE)
	private Long id;

	@Temporal(TemporalType.DATE)
	private Date creationDate;
	
	@Temporal(TemporalType.DATE)
	private Date emisionDate;
	
	@Temporal(TemporalType.DATE)
	private Date expirationDate;
	
	@Temporal(TemporalType.DATE)
	private Date serviceDate;

	@Column(unique=true)
	private Long number;

	private String description;
	
	private String reference;
	
	@Temporal(TemporalType.DATE)
	private Date emisionPeriod;
	
	private Integer printingsNumber;
	


	@Column(length = 30)
	private String groupingCode;

	private String address;

	private Boolean exempt;

	private Boolean isNoPasiveSubject;

	private Boolean applyInterest;
	
	@Transient
	private Boolean isSelected;
	
	
	/**
	 * El valor base o cantidad ingresada para el calculo del rubro
	 * Por ejemplo Numero de tachos de basura
	 * o base imponible o avaluo del vehículo
	 */
	private BigDecimal base;
	
	/**
	 * Valor emitido de la obligacion municipal
	 */
	private BigDecimal value;

	private BigDecimal interest;

	private BigDecimal discount;

	private BigDecimal surcharge;

	private BigDecimal balance;

	private BigDecimal taxesTotal;
	
	private BigDecimal paidTotal;
	
	private BigDecimal taxableTotal;

	/**
	 * Relationships
	 */
		
	@OneToOne(mappedBy="municipalBond", fetch = FetchType.LAZY)
	private Receipt receipt;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "notification_id")
	private Notification notification;

	@ManyToOne(fetch = FetchType.LAZY)
	private PaymentAgreement paymentAgreement;
	
	@ManyToOne(fetch = FetchType.LAZY)
	private CreditNote creditNote;
	
	@Enumerated(EnumType.STRING)
	@Column(length = 10)
	private LegalStatus legalStatus;	

	@Enumerated(EnumType.STRING)
	@Column(length = 15)
	private MunicipalBondType municipalBondType;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "municipalBondStatus_id")
	private MunicipalBondStatus municipalBondStatus;

	@OneToMany(mappedBy = "municipalBond", cascade = { CascadeType.MERGE,CascadeType.PERSIST })
	@Cascade(value = org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
	private Set<Item> items;

	@OneToMany(mappedBy = "discountedBond", cascade = { CascadeType.MERGE,CascadeType.PERSIST })
	@Cascade(value = org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
	private Set<Item> discountItems;

	@OneToMany(mappedBy = "surchargedBond", cascade = { CascadeType.MERGE,
			CascadeType.PERSIST })
	@Cascade(value = org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
	private Set<Item> surchargeItems;

	@ManyToOne(fetch = FetchType.LAZY)
	private Entry entry;

	@OneToMany(mappedBy = "municipalBond",fetch = FetchType.LAZY)
	private List<Deposit> deposits;
	
	
	@OneToMany(cascade=CascadeType.ALL,fetch = FetchType.LAZY)
	@Cascade(value=org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
	@JoinColumn(name="municipalBond_id")
	private Set<TaxItem> taxItems;

	@ManyToOne(fetch = FetchType.LAZY)
	private Resident resident;

	@ManyToOne(fetch = FetchType.LAZY)
	private FiscalPeriod fiscalPeriod;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "timePeriod_id")
	private TimePeriod timePeriod;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "emitter_id")
	private Person emitter;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "originator_id")
	private Person originator;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE })
	@JoinColumn(name = "adjunct_id")
	private Adjunct adjunct;
	
	public MunicipalBond() {
		creationDate = Calendar.getInstance().getTime();
		emisionDate = Calendar.getInstance().getTime();
		expirationDate = Calendar.getInstance().getTime();
		exempt = Boolean.FALSE;
		isNoPasiveSubject = Boolean.FALSE;
		interest = BigDecimal.ZERO;
		discount = BigDecimal.ZERO;
		surcharge = BigDecimal.ZERO;
		taxesTotal = BigDecimal.ZERO;
		taxableTotal = BigDecimal.ZERO;
		paidTotal = BigDecimal.ZERO;
		balance = BigDecimal.ZERO;
		legalStatus = LegalStatus.ACCEPTED;
		items = new HashSet<Item>();
		discountItems = new HashSet<Item>();
		surchargeItems = new HashSet<Item>();
		deposits = new LinkedList<Deposit>();
		taxItems = new HashSet<TaxItem>();
		printingsNumber = 0;
	}

	public void calculateTaxableTotal() {
		taxableTotal = BigDecimal.ZERO;
		for (Item i : this.getItems()) {
			if (i.getIsTaxable()){
				taxableTotal = taxableTotal.add(i.getTotal());
				System.out.println(":)============== sumando SUBTOTAL==>" + taxableTotal);
			}
		}
	}

	public BigDecimal getInterestTotal() {
		BigDecimal interestTotal = BigDecimal.ZERO;
		for (Deposit d : this.getDeposits()) {
			if(d.getStatus() == FinancialStatus.VALID){
				interestTotal = interestTotal.add(d.getInterest());
			}
		}
		return interestTotal;
	}
	
	public BigDecimal getSubTotal() {
		BigDecimal subTotal = BigDecimal.ZERO;
		for (Item item : this.getItems()) {
			subTotal = subTotal.add(item.getTotal());
		}
		return subTotal;
	}
	
	// TODO Revisar el calculo y cambiar de capas
	public BigDecimal getTotal() {
		BigDecimal total = BigDecimal.ZERO; 
		total = total.add(getSubTotal());
		total = total.add(getTaxesTotal());
		total = total.add(getInterestTotal());
		return total;
	}
	
	public void calculateTaxesTotal(){
		taxesTotal = BigDecimal.ZERO;
		for (TaxItem taxItem : this.getTaxItems()){
			taxesTotal = taxesTotal.add(taxItem.getValue()); 
		}
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Date getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	public Date getEmisionDate() {
		return emisionDate;
	}

	public void setEmisionDate(Date emisionDate) {
		this.emisionDate = emisionDate;
	}

	public Date getExpirationDate() {
		return expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	public Long getNumber() {
		return number;
	}

	public void setNumber(Long number) {
		this.number = number;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public BigDecimal getValue() {
		return value;
	}

	public void setValue(BigDecimal value) {
		this.value = value;
	}

	public String getTransformedServiceDate() {
		String serviceDateStr = null; 
		if (getEntry() != null && getEntry().getDatePattern() != null) {
			if (serviceDate != null) {
				DateFormat df = new SimpleDateFormat(getEntry().getDatePattern());
				serviceDateStr = df.format(serviceDate);
			}
		}
		return serviceDateStr;
	}

	public Date getServiceDate() {
		return serviceDate;
	}

	public void setServiceDate(Date serviceDate) {
		this.serviceDate = serviceDate;
	}

	public String getGroupingCode() {
		return groupingCode;
	}

	public void setGroupingCode(String groupingCode) {
		this.groupingCode = groupingCode;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public MunicipalBondType getMunicipalBondType() {
		return municipalBondType;
	}

	public void setMunicipalBondType(MunicipalBondType municipalBondType) {
		this.municipalBondType = municipalBondType;
	}

	public MunicipalBondStatus getMunicipalBondStatus() {
		return municipalBondStatus;
	}

	public void setMunicipalBondStatus(MunicipalBondStatus municipalBondStatus) {
		this.municipalBondStatus = municipalBondStatus;
	}

	public List<Item> getItems() {
		List<Item> itemsList = new ArrayList<Item>();
		itemsList.addAll(items);
		return itemsList;
	}

	public void setItems(Set<Item> items) {
		this.items = items;
	}

	public Resident getResident() {
		return resident;
	}

	public void setResident(Resident resident) {
		this.resident = resident;
	}

	public FiscalPeriod getFiscalPeriod() {
		return fiscalPeriod;
	}

	public void setFiscalPeriod(FiscalPeriod fiscalPeriod) {
		this.fiscalPeriod = fiscalPeriod;
	}

	public TimePeriod getTimePeriod() {
		return timePeriod;
	}

	public void setTimePeriod(TimePeriod timePeriod) {
		this.timePeriod = timePeriod;
	}

	public void add(Item item) {
		if (!this.items.contains(item)) {
			this.items.add(item);
			item.setMunicipalBond(this);
		}
	}

	public void remove(Item item) {
		boolean removed = this.items.remove(item);
		if (removed){
			item.setMunicipalBond((MunicipalBond) null);
		}
	}

	public void calculateValue() {
		BigDecimal value = BigDecimal.ZERO;
		for (Item item : items) {
			value = value.add(item.getTotal());
		}
		this.setValue(value);
	}

	public BigDecimal getTaxableTotal() {
		return taxableTotal;
	}


	public void setTaxableTotal(BigDecimal taxableTotal) {
		this.taxableTotal = taxableTotal;
	}

	public Entry getEntry() {
		return entry;
	}

	public void setEntry(Entry entry) {
		this.entry = entry;
	}

	public Boolean getExempt() {
		return exempt;
	}

	public void setExempt(Boolean exempt) {
		this.exempt = exempt;
	}

	public Boolean getIsNoPasiveSubject() {
		return isNoPasiveSubject;
	}

	public void setIsNoPasiveSubject(Boolean isNoPasiveSubject) {
		this.isNoPasiveSubject = isNoPasiveSubject;
	}

	public BigDecimal getBase() {
		return base;
	}

	public void setBase(BigDecimal base) {
		this.base = base;
	}

	public BigDecimal getPaidTotal() {
		return paidTotal;
	}
	
	public void setPaidTotal(BigDecimal paidTotal) {
		this.paidTotal = paidTotal;
	}
	

	public BigDecimal getInterest() {
		return interest;
	}

	public void setInterest(BigDecimal interest) {
		this.interest = interest;
	}

	public BigDecimal getDiscount() {
		return discount;
	}

	public void setDiscount(BigDecimal discount) {
		this.discount = discount;
	}

	public BigDecimal getSurcharge() {
		return surcharge;
	}

	public void setSurcharge(BigDecimal surcharge) {
		this.surcharge = surcharge;
	}

	public Person getEmitter() {
		return emitter;
	}

	public void setEmitter(Person emitter) {
		this.emitter = emitter;
	}

	public Person getOriginator() {
		return originator;
	}

	public void setOriginator(Person originator) {
		this.originator = originator;
	}

	public Adjunct getAdjunct() {
		return adjunct;
	}

	public void setAdjunct(Adjunct adjunct) {
		this.adjunct = adjunct;
	}

	public String getAdjunctName() {
		if (entry != null) {
			String adjunctName = entry.getAdjunctClassName();
			int index = adjunctName.lastIndexOf('.');
			adjunctName = adjunctName.substring(index + 1);
			System.out.println("TAKE THE TIME -----> " + adjunctName);
			return adjunctName;
		}
		return "Empty";
	}

	public List<Item> getDiscountItems() {
		List<Item> itemsList = new ArrayList<Item>();
		itemsList.addAll(discountItems);
		return itemsList;
	}

	public void setDiscountItems(Set<Item> discountItems) {
		this.discountItems = discountItems;
	}

	public List<Item> getSurchargeItems() {
		List<Item> itemsList = new ArrayList<Item>();
		itemsList.addAll(surchargeItems);
		return itemsList;
	}

	public void setSurchargeItems(Set<Item> surchargeItems) {
		this.surchargeItems = surchargeItems;
	}

	public void addDiscountItem(Item item) {
		if (!this.discountItems.contains(item)) {
			this.discountItems.add(item);
			item.setDiscountedBond(this);
		}
	}

	public void removeDiscountItem(Item item) {
		boolean removed = this.discountItems.remove(item);
		if (removed){
			item.setDiscountedBond((MunicipalBond) null);
		}
	}

	public void addSurchargeItem(Item item) {
		if (!this.surchargeItems.contains(item)) {
			this.surchargeItems.add(item);
			item.setSurchargedBond(this);
		}
	}

	public void removeSurchargeItem(Item item) {
		boolean removed = this.surchargeItems.remove(item);
		if (removed) {
			item.setSurchargedBond((MunicipalBond) null);
		}
	}

	public void setNotification(Notification notification) {
		this.notification = notification;
	}

	public Notification getNotification() {
		return notification;
	}

	@Transient
	public boolean isNotificationBeGiven() {
		return this.notification != null;
	}

	public PaymentAgreement getPaymentAgreement() {
		return paymentAgreement;
	}

	public void setPaymentAgreement(PaymentAgreement paymentAgreement) {
		this.paymentAgreement = paymentAgreement;
	}

	public Boolean getApplyInterest() {
		return applyInterest;
	}

	public void setApplyInterest(Boolean applyInterest) {
		this.applyInterest = applyInterest;
	}

	public BigDecimal getBalance() {
		return balance;
	}

	public void setBalance(BigDecimal balance) {
		this.balance = balance;
	}

	public List<Deposit> getDeposits() {
		return deposits;
	}

	public void setDeposits(List<Deposit> deposits) {
		this.deposits = deposits;
	}

	public void add(Deposit deposit) {
		if (!this.deposits.contains(deposit)) {
			this.deposits.add(deposit);
			deposit.setMunicipalBond(this);
		}
	}

	public void remove(Deposit deposit) {
		boolean removed = this.deposits.remove(deposit);
		if (removed)
			deposit.setMunicipalBond(null);
	}
	
	public Boolean getIsCanceled(){
		System.out.println("BALANCE ---> "+balance);
		return balance != BigDecimal.ZERO;
	}

	public List<TaxItem> getTaxItems() {
		List<TaxItem> itemsList = new ArrayList<TaxItem>();
		itemsList.addAll(taxItems);
		return itemsList;
	}

	public void setTaxItems(Set<TaxItem> taxItems) {
		this.taxItems = taxItems;
	}
	
	public void add(TaxItem taxItem){
		if (!this.taxItems.contains(taxItem)){
			this.taxItems.add(taxItem);
		}
	}
	
	public void remove(TaxItem taxItem){
		this.taxItems.remove(taxItems);
	}

	public BigDecimal getTaxesTotal() {
		return taxesTotal;
	}

	public void setTaxesTotal(BigDecimal taxesTotal) {
		this.taxesTotal = taxesTotal;
	}
	
	public Receipt getReceipt() {
		return receipt;
	}

	public void setReceipt(Receipt receipt) {
		this.receipt = receipt;
	}

	public Boolean getIsSelected() {
		return isSelected;
	}

	public void setIsSelected(Boolean isSelected) {
		this.isSelected = isSelected;
	}

	public String getReference() {
		return reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}
	
	public CreditNote getCreditNote() {
		return creditNote;
	}

	public void setCreditNote(CreditNote creditNote) {
		this.creditNote = creditNote;
	}

	public LegalStatus getLegalStatus() {
		return legalStatus;
	}

	public void setLegalStatus(LegalStatus legalStatus) {
		this.legalStatus = legalStatus;
	}

	public Integer getPrintingsNumber() {
		return printingsNumber;
	}

	public void setPrintingsNumber(Integer printingsNumber) {
		this.printingsNumber = printingsNumber;
	}
	
	public Date getEmisionPeriod() {
		return emisionPeriod;
	}

	public void setEmisionPeriod(Date emisionPeriod) {
		this.emisionPeriod = emisionPeriod;
	}
	
}// end MunicipalBond